#!/usr/bin/env python3
"""
Configuration setup script for the cats database project.
This script helps users configure their environment variables.
"""

import os
import shutil
import getpass
from pathlib import Path

def create_env_file():
    """Create a .env file with user input."""
    print("üîß Database Configuration Setup")
    print("=" * 40)
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    # Check if .env already exists
    if env_file.exists():
        overwrite = input("üìù .env file already exists. Overwrite? (y/n): ").strip().lower()
        if overwrite not in ['y', 'yes']:
            print("‚ùå Setup cancelled.")
            return
    
    # Start with example if it exists
    if env_example.exists():
        shutil.copy(env_example, env_file)
        print("‚úÖ Copied .env.example to .env")
    
    print("\nüìã Please provide the following database configuration:")
    
    # Get user input
    db_name = input("Database name [catsdb]: ").strip() or "catsdb"
    db_user = input("Database user [postgres]: ").strip() or "postgres"
    
    # Secure password input
    while True:
        db_password = getpass.getpass("Database password: ")
        if db_password:
            confirm_password = getpass.getpass("Confirm password: ")
            if db_password == confirm_password:
                break
            else:
                print("‚ùå Passwords don't match. Please try again.")
        else:
            print("‚ùå Password cannot be empty. Please try again.")
    
    db_host = input("Database host [localhost]: ").strip() or "localhost"
    db_port = input("Database port [5432]: ").strip() or "5432"
    
    # Validate port
    try:
        db_port = int(db_port)
    except ValueError:
        print("‚ùå Invalid port number. Using default 5432.")
        db_port = 5432
    
    # Write to .env file
    env_content = f"""# Database Configuration
POSTGRES_DB={db_name}
POSTGRES_USER={db_user}
POSTGRES_PASSWORD={db_password}
DB_HOST={db_host}
DB_PORT={db_port}

# Generated by setup script on {os.popen('date').read().strip()}
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    # Set appropriate permissions (Unix/Linux/macOS)
    if os.name != 'nt':  # Not Windows
        os.chmod(env_file, 0o600)  # Read/write for owner only
    
    print(f"\n‚úÖ Configuration saved to {env_file}")
    print("üîí File permissions set to owner-only read/write")
    
    return True

def check_requirements():
    """Check if required Python packages are installed."""
    print("\nüîç Checking Python requirements...")
    
    required_packages = ['psycopg2', 'dotenv']
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'psycopg2':
                import psycopg2
            elif package == 'dotenv':
                import dotenv
            print(f"‚úÖ {package} is installed")
        except ImportError:
            print(f"‚ùå {package} is not installed")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüì¶ To install missing packages, run:")
        print("pip install -r requirements.txt")
        return False
    
    return True

def test_connection():
    """Test database connection with current configuration."""
    print("\nüîå Testing database connection...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        import psycopg2
        
        # Get configuration from environment
        config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': int(os.getenv('DB_PORT', '5432')),
            'database': os.getenv('POSTGRES_DB', 'catsdb'),
            'user': os.getenv('POSTGRES_USER', 'postgres'),
            'password': os.getenv('POSTGRES_PASSWORD', 'password')
        }
        
        print(f"Connecting to: {config['user']}@{config['host']}:{config['port']}/{config['database']}")
        
        # Attempt connection
        connection = psycopg2.connect(**config)
        cursor = connection.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        
        cursor.close()
        connection.close()
        
        print("‚úÖ Database connection successful!")
        print(f"üìä PostgreSQL version: {version}")
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("\nüí° Troubleshooting tips:")
        print("1. Make sure Docker containers are running: docker-compose up -d")
        print("2. Check your .env file configuration")
        print("3. Verify database credentials")
        return False

def main():
    """Main setup function."""
    print("üê± Cats Database Project Setup")
    print("=" * 50)
    
    while True:
        print("\nüìã Choose an option:")
        print("1. Create/update .env configuration file")
        print("2. Check Python requirements")
        print("3. Test database connection")
        print("4. Run all checks")
        print("5. Exit")
        
        choice = input("\nEnter your choice (1-5): ").strip()
        
        if choice == '1':
            create_env_file()
        elif choice == '2':
            check_requirements()
        elif choice == '3':
            test_connection()
        elif choice == '4':
            print("üöÄ Running complete setup check...\n")
            env_ok = create_env_file()
            req_ok = check_requirements()
            if env_ok and req_ok:
                test_connection()
        elif choice == '5':
            print("üëã Setup complete!")
            break
        else:
            print("‚ùå Invalid choice. Please enter 1, 2, 3, 4, or 5.")

if __name__ == "__main__":
    main()
